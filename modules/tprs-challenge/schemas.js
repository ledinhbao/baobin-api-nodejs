"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = void 0;
var graphql_1 = require("graphql");
var sharedRunnerFields = "\n   id: ID\n   displayName: String\n   \"Unique field\"\n   facebookProfile: String\n";
exports.typeDefs = graphql_1.buildSchema("\n   \"Prepresent a runner profile. Field facebookProfile is unique.\"\n   type Runner {\n      id: ID\n      displayName: String\n      \"\"\"\n      Unique field\n      \"\"\"\n      facebookProfile: String\n   }\n   input RunnerInput {\n      displayName: String\n      facebookProfile: String = \"\"\n   }\n\n   type Challenge {\n      id: ID\n      name: String\n      startDate: String\n      endDate: String\n      description: String\n      participants: [Participant]\n   }\n   input ChallengeInput {\n      name: String\n      startDate: String\n      endDate: String\n      description: String\n   }\n\n   \"Prepresent a pair (key-value) type.\"\n   input KeyValue {\n      key: String = \"\"\n      value: String = \"\"\n   }\n   \"Bulk registration to a challenge. Return an Array<Record> contains registered value. Failed to save any records in runner list will throw error.\"\n   input BulkRegisterInput {\n      challengeId: ID!\n      \"An array of key-value pairs, which key is runnerId and value is the amount they want to register.\"\n      runners: [KeyValue]\n      \"The date of registers. Date cannot be separated between each registant. Leaving date null or empty string in order to use current date.\"\n      date: String = \"\"\n   }\n\n   \"Prepresent a pair (date-value) type.\"\n   type DateValue {\n      date: String\n      value: String\n   }\n   type Record {\n      id: ID\n      runnerId: ID\n      challengeId: ID\n      date: String\n      value: String\n      \"This field is true to indicate a registration. Only one record has this field is true for every pair of [runnerId, challengeId].\"\n      registerRecord: Boolean \n   }\n   input RecordInput {\n      runnerId: ID!\n      challengeId: ID!\n      date: String = \"\"   \n      registerRecord: Boolean = false\n      value: String\n   }\n   \"Input type for addRecordForParticipantBulk.\"\n   input BulkRecordInput {\n      runnerId: ID!\n      challengeId: ID!\n      records: [KeyValue]\n   }\n\n   type Records {\n      runner: Runner\n      challenge: Challenge\n      register: Record\n      data: [Record]\n   }\n\n   \"Prepresent a participant within a challenge. This type cannot be used invidually.\"\n   type Participant {\n      " + sharedRunnerFields + "\n      \"The register information for a specific challenge of a runner.\"\n      register: DateValue\n      \"All records for this participant.\"\n      records: [DateValue]\n   }\n\n   \"Version 1.2.1\"\n   type Query {\n      getRunners: [Runner]\n      getRunnerInfo(id:String): Runner\n      getChallenges: [Challenge]\n      getChallengeInfo(id: ID): Challenge\n      getChallengeParticipants(id: ID!): [Runner]\n      \"Return null if the runner does not register for challenge.\"\n      getRecordsForParticipant(runnerId: ID!, challengeId: ID!): Records\n      getRecordById(id: String): Record\n   }\n\n   type Mutation {\n      createRunnerProfile(data: RunnerInput): Runner\n      updateRunnerProfile(id: ID!, data: RunnerInput): Runner\n      createChallenge(data: ChallengeInput): Challenge\n      updateChallenge(id: ID!, data: ChallengeInput): Challenge\n      addRunnerToChallenge(data: RecordInput!): Record\n      registerToChallenge(data: RecordInput): Record\n      registerToChallengeBulk(data: BulkRegisterInput): [Record]\n      unregisterToChallenge(data: RecordInput): Boolean\n      updateRegister(data: RecordInput!): Record\n      addRecordForParticipant(data: RecordInput): Record\n\n      \"To add multiple records to a challenge, for a runner at one time. Any invalid data in records array will lead to throw error.\"\n      addRecordForParticipantBulk(data: BulkRecordInput): [Record]\n   }\n");
